What are Clojure's basic numerical types?	Integers, floating point numbers, ratios, and characters.
What are "keywords" in Clojure terminology?	Atoms, as in Prolog or Erlang, not reserved words.
Anonymous functions are also called ...	... lambdas.
What is Clojure's fundamental collection type?<br><br>What methods define it?	Sequences are the abstraction above lists, vectors, maps, sets, etc.<br><br>They share the methods <tt>first</tt>, <tt>rest</tt>, and <tt>cons</tt>.
What's the problem with <tt>if</tt>?<br><br>What's the alternative?	The nesting of many <tt>if</tt>s is difficult to read.<br><br>The special form <tt>cond</tt> allows as many arguments as needed for <em>if ... then ... elseif ... then ... elseif ... </em><br><tt>cond</tt> provides <tt>:else</tt> to catch everything as the final branch.
Sequences are roughly equivalent to what in Java?	<tt>Iterators</tt>
What do predicates return in idiomatic Clojure?	Instead of returning the atoms <tt>false</tt>/<tt>true</tt>, they take advantage of the fact that anything other than <tt>false</tt>/<tt>nil</tt> is "true" and return a more meaningful value.
How can you create a list without invoking it as a function?	By quoting:<br><pre>'(a b c)</pre><br><pre>(quote (a b c))</pre>
How are special forms different from functions?<br><br>What's the catch?	Special forms get arguments unevaluated, controlling if/when to evaluate them.<br><br>However, special forms are <em>not</em> first-class values.
Give two methods of division.	<tt>/</tt> which returns a <tt>Ratio</tt>.<br><br><tt>quot</tt> performs truncating integer division.
What's the difference between <tt>rem</tt> and <tt>mod</tt>?	They differ in their handling of signs. If the first and second arguments have different signs, the result of <tt>mod</tt> will have the same sign as the second argument, while the result of <tt>rem</tt> will have the same sign as the first argument.
Describe negation.	<tt>not</tt> and <tt>not=</tt> are provided.
What's the difference between <tt>=</tt> and <tt>==</tt>?	<tt>==</tt> only compares arguments that can be case to <tt>java.lang.Number</tt>.<br><br><tt>=</tt> compares arguments in a type-independent manner. For example, vectors can be equal to lists according to <tt>=</tt>.
Unlike other Lisps, the order of functions ...	... matters. Forward-references are not allowed.
Test object identity.	<tt>identical</tt>
Test for collection type.	<tt>coll?</tt>, <tt>seq?</tt>, <tt>vector?</tt>, <tt>list?</tt>, <tt>map?</tt>, <tt>set?</tt>
Test a collection for membership.<br><br>For non-reptition.	<tt>contains?</tt>, <tt>distinct?</tt>
In Clojure the standard streams have ...	... special reassignable names.<br><br><tt>*in*</tt>, <tt>*out*</tt>, <tt>*err*</tt>
Get back recent repl values.	<tt>*1</tt>, <tt>*2</tt>, <tt>*3</tt> are the first, second, and third most recent values.<br><tt>*e</tt> is the most recent exception.
What is the comment syntax?	<tt>;</tt> comments out the rest of the line.
In place of classes, Clojure has ...<br><br>What is their syntax?	... structs<br><br>Define with:<br><pre>(defstruct name :field1 :field2 ...)</pre><br>Instantiate with:<br><pre>(struct name val1 val2 ...)</pre><br>Access fields with:<br><pre>(:fieldName structName)</pre>
What is a lazy data structure?<br><br>What's an easy way to make them in Haskell?	A data structure whose parts don't exist until they are accessed.<br><br><tt>iterate</tt> takes a function <tt>f</tt> and a starting value <tt>n</tt> and produces a lazy infinite series:<br><pre>(n, f(n), f(f(n)), f(f(f(n))), ...)</pre>
What does the <tt>&</tt> mean in a function signature?	It comes before a vararg, which is available as a list in the body.
Describe <tt>do</tt>.	<pre>(do exprs*)</pre><br>Evaluates the expressions in order and returns the value of the last.
Describe list comprehension syntax.	<pre>(for seq-exprs body-expr)</pre><br>Takes a vector of one or more binding-form/collection-expr pairs, each followed by zero or more modifiers, and yields a lazy sequence of evaluations of expr.<br><br>Supported modifiers are: <tt>:let [binding-form expr ...]</tt>, <tt>:while test</tt>, <tt>:when test</tt>.
How do you partially apply functions?	Use <tt>partial</tt>, followed by a function and fewer than the normal number of arguments.<br><br><pre>user=> (def equals5 (partial = 5))<br>#'user/equals5<br>user=> (equals5 5)<br>true</pre>
