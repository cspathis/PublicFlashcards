What are the goals of instruction set architecture (ISA) design?<br>	- Easy construction hardware and compilers.<br>- Maximizing performance.<br>- Minimizing cost.<br>- Minimizing power.<br>
ISAs are essential to supporting which model of computation?<br>	The stored-program concept, in which a both programs and data can be stored in memory as numbers.<br>
What is the format of an ARM instruction?<br>	- There is exactly one operation.<br>- It has exactly three operands.<br>
What are the four underlying principles of hardware design?<br>	1. Simplicity favors regularity.<br>2. Smaller is faster.<br>3. Make the common case fast.<br>
What is a word?<br>	The natural unit of data used by a particular computer design. It is usually the size of addressability of the system, meaning the largest address is two raised to the power of the word size minus one.<br>
Why not have a larger number of registers?<br>	- The farther the signal must travel to reach a register, the slower a cycle may become.<br>- Addressing large numbers is constrained by the size of the instruction.<br>- Energy conservation.<br>
How do computers get around the small number of registers?<br>	With data transfer instructions - instructions that move data from memory to the registers (<em>loads</em>) and back (<em>stores</em>).<br>
How is ARM addressing different from other architectures?<br>	ARM uses byte-addressing. Hence its <em>alignment restriction</em> requires that addresses must be in multiples of the word size.<br>Some other architectures uses word-addressing, in which case addresses are simply nonnegative integers.<br>
Describe endianness in terms of addressability.<br>	Big-endian systems use the leftmost byte as the word's address.<br>Little-endian systems like ARM use the rightmost byte.<br>
What is spilling?<br>	The process of moving program variables that have no space in registers into memory. Compilers will attempt to spill variables that are least likely to be needed again in the near future.<br>
Why is it more desirable for a program variable to be in a register than in memory?<br>	- Memory takes longer to access.<br>- Registers can be accessed and operated on in one instruction. Memory loads require instructions that do no computation on the loaded values.<br>- Memory takes more energy.<br>
What is an intermediate operand?<br>	A constant value, as opposed to a reference to a register.<br>
Base register + offset addressing in instructions are useful in working with ...<br>	... arrays.<br>
What are the limitations of the simple sign and magnitude representation?<br>	- The side of the sign bit feels arbitrary.<br>- The sign of the result of an operation may need to be added in a second step since it cannot be anticipated in advance.<br>- Zero is represented twice, once "positive" and once "negative".<br>
Why is hexadecimal popular?<br>	Since it, like binary, is a power of 2, it is easy to convert to and from binary.<br>
What is the consequence of having multiple instruction formats?<br>How can this be mitigated?<br>	Hardware design is made more complicated.<br><br>This can be partially mitigated by keeping some properties common to all the formats.<br>
What is a common use of bit-wise and bit-shifting operations?<br>What functionalities in C are similar?<br>	Accessing and implanting bits into words.<br><br>C (and others) have bit-wise and bit-shifting operators, but C also has bit fields which allow packing data into parts of a word in an enforced manner.<br>
What is a bit mask?<br>	A bit pattern used with logical <tt>AND</tt> to hide some of the bits in the target.<br>
How is bit shifting unique in ARM?<br>	It has no dedicated instruction. Instead, shifts can be specified directly inside a data processing instruction.<br>
What is a basic block?<br>How are they used?<br>	A portion of code within a program with one entry point and one exit point.<br>One entry point means jump targets are only found at the beginning.<br>One exit point means that only the last instruction can jump.<br><br>Since they have convenient formal properties, compilers break the program into basic blocks.<br>
How do compare instructions communicate their results to conditional branches?<br>	The result of the comparison is stored in condition flags that the branch checks.<br><br>Many other instructions can compare/alter the condition flags.<br>
What is the advantage of treating signed integers as unsigned in two's complement?<br>	<tt>x < y</tt> returns true of <tt>x</tt> is less than <tt>y</tt> <em>or</em> of x is negative.<br><br>This allows array bounds to be checked with one comparison and one branch based on that comparison.<br>
What is the program counter?<br>	A special register that stores the location of the current instruction.<br>
What strategies does ARM use to increase the jump distance?<br>	- PC-relative addressing which leaves a 24-bit field to specify the distance from the PC.<br>- Interpreting the PC offsets as words instead of bytes.<br>
What is unusual in ARM's conditional instructions?<br>	Not just branches can check conditions. Many operations like ADD and SUB can execute conditionally, removing the need for branches with conditional execution.<br>
Name four common addressing modes.<br>	- Immediate addressing - constant operand<br>- Register addressing - operand names the register which contains the value<br>- Scaled register addressing - same as above, but the register's value is shifted before being used<br>- PC-relative addressing - a constant operand is added to the program counter<br>
