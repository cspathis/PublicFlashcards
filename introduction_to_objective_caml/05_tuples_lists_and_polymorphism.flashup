#GRAMMAR 1
#TOPLEFT Introduction to Objective Caml
#TOPRIGHT 5
#NUMBERS true

* How does OCaml support parametric polymorphism?
Expressions can have types that include type variables, standing for an arbitrary type.
Such types are called ``parameterized``.

* How are type variables written?
Lowercase identifiers starting with a lowercase letter prefixed by an apostrophe.

* Add type annotations to a function declaration.
`
let funcname (p1 : pt1) ... (pn : ptn) : rest = ...
`

The parens are essential.

* How are tuples written?
* And their types?
Comma-separated values, not necessarily surrounded by parens.

The types are written `*`-separated.

* What is ``destructuring``?
* Demonstrate on tuples.
Decomposition of an aggregate type using pattern matching.

`
# let a, b = 1, 2;;
val a : int = 1
val b : int = 2
`

* Access the elements of a tuple.
- Use pattern matching.
- For a 2-tuple use `fst` and `snd`.

* How are tuples written?
`;`-separated values surrounded by square brackets.

* How is the ``cons`` operator used?
Both to prepend to a list and to pattern match the head of a list.

