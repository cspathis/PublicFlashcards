What are some other terms for <em>disjoint union</em>?<br>	<em>Tagged unions</em>, <em>variant records</em>, <em>algebraic data types</em>.<br>
What kinds of unions does OCaml support?<br>	<em>exact unions</em> which do not admit new members after initial definition, and <em>open unions</em>, which do.<br>
Give the syntax for exact unions.<br>	<pre>type name =<br>    name1 [of type1]<br>  ...<br>  | nameN [of typeN]<br></pre><br>Each <tt>namei</tt> is the <em>constructor</em> names and must begin with a capital letter.<br>The optional <tt>typei</tt> is its value.<br>
How are instances of a disjoint union created?<br>	With the syntax of function application give the constructor name followed by an instance of its value type, if applicable.<br>
Give the syntax of open unions.<br>	<pre>type 'a name =<br>  [> 'name1 [of type1]<br>  ...<br>  | 'nameN [of typeN] ] as 'a<br></pre>
What does the type <tt>[> X of Y]</tt> mean?<br>	It means the expression is an instance of a union type that contains the member <tt>X</tt> with value <tt>Y</tt>. More cases that are supported can be added using <tt>|</tt>.<br>
The value of a union instance can be accessed through ...<br>	... pattern matching.<br>
Give the effective definition of <tt>list</tt>.<br>Why isn't this the actual definition?<br>	<pre>type 'a list =<br>    []<br>  | :: of 'a * 'a list<br></pre><br><tt>[]</tt> is not a valid name and requires language support.<br>
Give the definition of <tt>option</tt>.<br>	<pre>type 'a option =<br>    None<br>  | Some of 'a<br></pre>
Give another syntax for closed unions.<br>	Same as open unions, except with <tt><</tt> instead of <tt>></tt>.<br>
