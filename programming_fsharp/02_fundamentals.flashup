#GRAMMAR 1
#TOPLEFT Programming F#
#TOPRIGHT 2
#NUMBERS true

* Unlike Java, F#'s primitive types ...
- Have signed and unsigned versions.
- Include a fixed precision point type.

* How can you use an integer as the base of an exponent?
You must use `pown` instead of `**`, or convert to a floating-point type.

* What are the conversion functions for primitive types?
They have the same names as the types being converted to.

* Why are conversion functions more widely used in F#?
There is no type coercion.

* For arbitrary precision integers F# features what?
Language support. Literals ending with `I` are `System.Numerics.BigIntegers`.

* What are the bitwise operators?
`&&&`, `|||, `^^^`, `<<<`, `>>>`

* Index a string.
`
"abcd".[0]
`

* How are multi-line strings written?
- One can end each line with a backslash while still in a string. Leading whitespace will be removed from the next line.
- With verbatim strings, but leading whitespace will not be removed.

* What is the verbatim string syntax?
An `@` before the string begins.

* What shortcut is provided for converting a string literals to arrays of bytes?
The suffice `B` after the close quote of a string literal.

* How is negation written?
`not` for unary negation.

* How is equality written?
* Inequality?
`=` and `<>`.

* What is the syntax of function definitions?
`
let funcname arg1 arg2 ... argN = body
`

* The result of a function is ...
The value of the last expression in a given path. There is no `return` keyword.

* How are function types written?
As in Haskell:
`
type1 -> type2 -> ... -> typeN
`

* Unlike in Haskell, functions using operators like `+` will default to ...
... `int` parameters instead of type parameters.

* How are type annotations written?
As usual, `name : type`.

* How are type parameters written?
With a leading `'`, e.g., `'a`, `'b`.

* Unlike in Scala, shadowing is allowed where?
In the same block. E.g., two consecutive lines can `let` the same identifier.

* What is the syntax of conditionals?
`
if   cond1 then res1
elif cond2 then res2
...
else res
`

* Unlike in Scala, each branch of a conditional must have what?
The same type. Upcasting will not be done.

* How are tuples written?
* How are their types written?
Comma separated values surrounded by round parens.

`
type1 * type2 * ... * typeN
`

* Access the elements of a tuple.
- Use `fst` and `snd`.
- Unpack with `let`
`
let a, b, c = (1, 2, 3)
`

* What is the list literal syntax?
Semi-colon separated values surrounded by square brackets.

* What is the syntax of list comprehensions?
Basically arbitrary code within square brackets. Elements are selected using the `yield` keyword.

* How are list comprehensions evaluated?
Eagerly, in memory.
