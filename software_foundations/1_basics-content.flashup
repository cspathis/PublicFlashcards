#GRAMMAR 1
#TOPRIGHT Software Foundations
#TOPLEFT 1 content
#NUMBERS true

* Create an enumerated type for the days of the week.
`
Inductive day : Type :=
  | monday : day
  | tuesday : day
  | wednesday : day
  | thursday : day
  | friday : day
  | saturday : day
  | sunday : day.
`

* Write a function `next_weekday`.
`
Definition next_weekday (d:day) : day :=
  match d with
  | monday => tuesday
  | tuesday => wednesday
  | wednesday => thursday
  | thursday => friday
  | friday => monday
  | saturday => monday
  | sunday => monday
  end.
`

* Prove that tuesday is two days after saturday.
`
Example test_next_weekday:
  (next_weekday (next_weekday saturday)) = tuesday.
`

* Create an enumerated type for booleans.
`
Inductive bool : Type :=
  | true : bool
  | false : bool.
`

* Define a boolean negation function.
`
Definition negb (b:bool) : bool :=
  match b with
  | true => false
  | false => true
  end.
`

* Define a function for boolean conjunction.
`
Definition andb (b1:bool) (b2:bool) : bool :=
  match b1 with
  | true => b2
  | false => false
  end.
`n

* Define a function for boolean disjunction.
`
Definition orb (b1:bool) (b2:bool) : bool := 
  match b1 with 
  | true => true
  | false => b2
  end.
`

* Define a polymorphic expression that can inhabit any type.
`
Definition admit {T: Type} : T. Admitted.
`

* Define a function for boolean nand.
`
Definition nandb (b1:bool) (b2:bool) : bool :=
  match b1 with
  | false => true
  | true  => negb b2
  end.
`

* Create a type for natural numbers.
`
Inductive nat : Type :=
  | O : nat
  | S : nat -> nat.
`

* Define a function for integer predecessor.
`
Definition pred (n:nat) : nat :=
  match n with
  | O    => O
  | S n' => n'
  end.
`

* Define a "minus two" function.
`
Definition minustwo (n:nat) : nat :=
  match n with
  | O        => O
  | S O      => O
  | S (S n') => n'
`


