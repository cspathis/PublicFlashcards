What's the difference between <tt>Int</tt> and <tt>Integer</tt>?<br>	<tt>Int</tt> is fixed width, its exact size depending on the hardware. It silently overflows.<br><br><tt>Integer</tt> is arbitrary sized.<br>
Why is <tt>Float</tt> discouraged?<br>	Haskell compilers writers focus their effort on making <tt>Double</tt> efficient.<br>
What's a type signature?<br>	The combination of <tt>::</tt> and the type after it.<br>
What is Haskell's syntax for function calls?<br>	The function name, a space, and then the arguments separated by spaces too.<br><br><pre>compare 3 2<br></pre>
What's a composite data type?<br>	A type constructed from other types, like lists and tuples.<br>
What is a type variable in Haskell?<br>	A variable that ranges over types instead of values.<br>
What are the capitalization rules for variables in Haskell?<br>	Type variables must start with a lowercase letter, and type names with an uppercase letter.<br>
Describe "unit" and 1-tuples in Haskell.<br>	Both the type name and it's sole value are written <tt>()</tt>.<br><br>There are no 1-tuples.<br>
Describe <tt>take</tt> and <tt>drop</tt>.<br>	Given a number <tt>n</tt> and a list, <tt>take</tt> returns the first <tt>n</tt> elements of the list, while <tt>drop</tt> returns all <em>but</em> the first <tt>n</tt> elements of the list.<br>
How do  you access the elements of a pair?<br>	<tt>fst</tt> and <tt>snd</tt><br>
Describes function association.<br>	It is the tightest association, and runs left to right.<br><br><pre>a b c d<br></pre><br>is equivalent to<br><br><pre>(((a b) c) d)<br></pre>
How do you split a string into a list of strings?<br>	<pre>ghci> lines "the quick\nbrown fox\njumps"<br>["the quick","brown fox","jumps"]<br></pre>
How can you tell if a function has side effects?<br>	Type type of the function's result will begin with <tt>IO</tt>:<br><br><pre>ghci> :type readFile<br>readFile :: FilePath -> IO String<br></pre>
How is Haskell's <tt>if</tt> different from the one in C-like languages?<br>	- <tt>if</tt> expressions result in a value.<br>- The parens around the condition are inferred.<br>- There's a <tt>then</tt> keyword to indicate the first branch.<br>
How is indentation significant in Haskell?<br>	It indicates that a line <em>continues</em> an indentation instead of starting a new one.<br>
What is <tt>null</tt>?<br>	A function that indicates whether a list is empty.<br>
What does lazy evaluation entail?<br>	- Delayed evaluation: evaluating an expression only when the result is required by a calling function.<br>- Short-circuit evaluation: evaluating an expression only to the extent it is required by the calling function.<br>- Applicative-order evaluation: evaluating an expression at most once.<br>
What's the difference between <tt>putStrLn</tt> and <tt>print</tt>?<br>	<tt>putStrLn</tt> only takes <tt>String</tt> arguments, <tt>print</tt> takes anything instance of <tt>Show</tt>.<br>
Compare how short-circuiting <tt>||</tt> is accomplished in Haskell and in Scala.<br>	In Scala short-circuiting is a result of by-name parameters, a way of achieving the standard Haskell non-strict evaluation. By-name parameters do not adhere to applicative-order evaluation. Haskell doesn't do anything special, expressions always short-circuit.<br>
Make a list of all natural numbers.<br>	<tt>[1..]</tt><br>
What is the type signature of <tt>last</tt>?<br>How is it read?<br>	`<br>last :: [a] -> a<br>`<br><br>"takes a list, all of whose elements have some type <tt>a</tt>, and returns a value of the same type <tt>a</tt>"<br>
What is a polymorphic function?<br>What kind of polymorphism does it reflect?<br>	One that has type variables in its signature, indicating that some of its arguments can be of any type.<br><br>This is an example of parametric polymorphism.<br>
What kind of polymorphism is provided by subclass mechanisms?<br>Does Haskell have it?<br>	Subtype polymorphism. Haskell isn't object-oriented so it doesn't offer this polymorphism.<br>
What kind of polymorphism is provided by implicit conversion?<br>Does Haskell have it?<br>	Coercion polymorphism. Haskell avoids it in even the simplest of cases. <em>E.g.</em>, integers are not converted to floating point numbers.<br>
What is the signature of <tt>take</tt>?<br>	<pre>ghci> :t take<br>take :: Int -> [a] -> [a]<br></pre><br><pre>Int -> ([a] -> [a])<br></pre>
