Whitespace is ...<br>	... not significant.<br>
What is the comment syntax?<br>What's the catch?<br>	As in Java, in-line <tt>//</tt> and multiline <tt>/* ... */</tt>.<br><br>Unfortunately, the multiline delimiters can appear in string literals, making commenting out arbitrary blocks of codes unreliable.<br>
What's strange about JavaScript's numerical types?<br>	There are no integers, or floating point of any size other than 64-bits.<br>There are no characters either.<br>
Create an exponential literal.<br>	<tt>xey</tt> is the same as <tt>x * pow(10, e)</tt>.<br>
Describe the string syntax.<br>How are they encoded?<br>	As in Python, single or double quote delimiters can be used.<br><br>16-bit fixed Unicode is used.<br>
Access the length of a string.<br>Concatenate two strings.<br>	'string'.length<br><br>Use <tt>+</tt>.<br>
What does the <tt><script></tt> tag do?<br>How do they relate to one another?<br>	The browser executes the compilation unit referred to in the tag right away.<br><br>They share a global namespace.<br>
What does <tt>var</tt> do?<br>	It indicates variables private to a function.<br>
Which statements can be labeled?<br>	<tt>switch</tt>, <tt>while</tt>, <tt>for</tt>, <tt>do</tt><br>
What's different about JavaScript's blocks?<br>	They don't define a new scope.<br>
Give the syntax of both kinds of conditionals.<br>	<pre>if (expr) then {<br>  ...<br>}<br>else {<br>  ...<br>}<br></pre><br>To get a value:<br><tt>if expr ? true-expr : false-expr</tt><br>
Conditionals accept what kind of values as "false"?<br>	<tt>false</tt>, <tt>null</tt>, <tt>undefined</tt>, empty string, <tt>0</tt>, <tt>NaN</tt><br>
Give the <tt>do-while</tt> syntax.<br>	<pre>do {<br>  ...<br>}<br>while (expr);<br></pre>
Give the <tt>switch</tt> syntax.<br>What's the classic <tt>switch</tt> mistake?<br>	Same as Java.<br><br><pre>switch (expr) {<br>  case expr: ...<br>  default: ...<br>}<br></pre><br>It falls through.<br>
Give the <tt>while</tt>/<tt>do-while</tt> syntax.<br>	Identical to Java.<br>
What are <tt>for</tt>'s two forms.<br>	The first is as in C++/Java.<br><br>The second is a for-each:<br><pre>for (x in y) {<br>  ...<br>}<br></pre>
What's the catch with for-each loops?<br>	You can't know if the binding form was found in the iterable object's prototype chain. For that reason you often see the body of a for-each being a single condition of the form:<br><pre>if (iterable.hasOwnProperty(bindingForm)) {<br>  ...<br>}<br></pre>
What happens if no <tt>return</tt> statement is given in a function.<br>	The function's result is <tt>undefined</tt>.<br>
How do you test for in/equality?<br>	<tt>===</tt> and <tt>!==</tt><br>
What unary operators are available?<br>	<tt>delete</tt>, <tt>new</tt>, <tt>typeof</tt>, <tt>+</tt>, <tt>-</tt>, <tt>!</tt><br>
What can <tt>typeof</tt> return?<br>	<tt>'number'</tt>, <tt>'string'</tt>, <tt>'boolean'</tt>, <tt>'undefined'</tt>, <tt>'function'</tt>, <tt>'object'</tt><br>
Create a named function literal.<br>Create an anonymous function literal.<br>	<pre>function name(args) {<br>  ...<br>}<br></pre><br><pre>function(args) {<br>  ...<br>}<br></pre>
Give the regex literal syntax.<br>	<tt>/regex/</tt><br><br>It cam optionally be trailed by any of <tt>g</tt>, <tt>i</tt>, or <tt>m</tt>.<br>
Give the array literal syntax.<br>	As is common, a comma-separated list inside square brackets.<br>
