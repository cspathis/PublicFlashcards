#GRAMMAR 1
#TOPLEFT Types and Programming Languages
#TOPRIGHT 5
#NUMBERS true

* Church's lambda calculus reduces all of computation to what?
The definition and application of functions.

* What is the bridge from lambda calculus to a language like ML or Haskell?
The addition of features definable in the lambda calculus itself.
Some are easily defined. E.g., syntax for numbers and collections.
Others are more challenging. E.g., mutable reference cells.

* What are the three kinds of terms in lambda calculus?
Variable:  ````v````
Abstraction:  ````$\lambda$ x.t````
Applications:  ````t t````

* What's the difference between an ``internal`` and ``external`` language?
An external language contains derived forms and can be translated to an internal language which uses only core features.

* Which way does function application associate?
To the left.

The following two are equivalent:
`
f g u
(f g) u
`

* The body of a lambda abstraction extends to where?
As far to the right as possible.

* What's the difference between a ``bound`` and ``free`` variable.
* What's a ``closed term``?
A variable is free if it is not bound by an enclosing abstraction.

Closed terms (aka ``combinators``) have no free variables.

* Describe computation in the lambda calculus.
Function application where the left-hand side is an abstraction:
````
$(\lambda x.t_1) t_2$
````

This becomes a new term, namely ````$t_1$```` with each instance of ````$x$```` in it replaced by ````$t2$````.
This can be written:

````
$[x \mapsto t_2]t_1$
````

* What's a ``redex``?
A reducible expression.

````
$(\lambda x.t_1) t_2$
````


