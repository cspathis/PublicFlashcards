Define <em>type system</em>.<br>	"A type system is a tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute."<br>
What is problematic with the term <em>dynamically typed language</em>.<br>	Those "types" are tags on the heap for identifying different kinds of values. They are not static <em>approximations</em> of runtime values.<br>
In what sense are type systems <em>conservative</em>?<br>	They can only prove the <em>absence</em> of some behaviors, never their presence. They therefore must reject some programs that will also lack these behaviors at runtime.<br>
What is the main research goal in the study of type systems?<br>	To allow more programs to be typed by improving the accuracy of static type approximations.<br>
The kinds of bad behaviors a type system eliminates are called ...<br>	... run-time type errors.<br>
What are the benefits of type systems?<br>	- Early detection of some programming errors.<br>- Maintenance/refactoring.<br>- Abstraction.<br>- Documentation.<br>- Language safety.<br>- Efficiency.<br>
What makes a language <em>safe</em>?<br>	Pierce: A safe language guarantees the integrity of its abstractions.<br>Cardelli: A safe language traps its errors, meaning they halt computation immediately or raise an exception that can be handled. Unsafe languages have untrapped errors that allow computation to proceed.<br>Also: A safe language lacks undefined behavior. Or in other words, it's portable between implementations.<br>
Why are there virtually no unsafe dynamically checked languages?<br>	There is little marginal cost to checking the safety of all operations at run-time once most are.<br>
What was the goal of the first type systems for programming languages?<br>	To distinguish between integers and floating-point numbers, for the sake of efficiency.<br>
