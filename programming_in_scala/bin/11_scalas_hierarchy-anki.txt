How do Scala classes extend AnyRef?<br><br>What does this provide?	With <tt>ScalaObject</tt>.<br><br>This only provides <tt>$tag</tt>, for pattern matching speed.
What does <tt>AnyRef</tt> add to <tt>java.lang.Object</tt>?	`final eq<br><br>final ne<br><br>final ==<br><br>final !=`
What does <tt>Any</tt> provide?	<tt>final ==</tt> (forwards to equals)<br><tt>final !=</tt> (opposite of ==, guaranteed)<br><br>`equals(Any)<br>hashCode()<br>toString()<br>final isInstanceOf[T]<br>final asInstanceOf[t] : T` (cast)
What does <tt>AnyVal</tt> add?	nothing
How are value types special?	They are declared abstract and final to prevent instantiation with the new keyword.
To what does every value type have implicit conversion?	It has conversion to a rich type in <tt>scala.runtime</tt> that provides more methods.
What is the terminology of the value types hierarchy?	<pre>                            value types<br>                         /        |      \<br>            numeric types      Boolean    Unit<br>               /                  |<br>        integer types        floating point types<br>         /        |   \           |           \<br>subrange types   Int  Long     Float        Double<br>   /    |    \<br>Byte  Short  Char<br></pre>
What is the top of the Scala type hierarchy?	<pre>            Any<br>         /       \<br>      AnyVal   AnyRef<br>               (on JVM = java.lang.Object)<br></pre>
What is the <tt>AnyRef</tt> hierarchy?	<pre>                        AnyRef<br>                   java.lang.Object<br>                 /           |          \<br>     ScalaObject           other Java   java.lang.String<br>     /         \             classes<br>  Iterable   other Scala<br>    |          classes<br>   Seq<br>    |<br>   List<br></pre>
What is a literal identifier?<br><br>What does it do?	Any sequence of acceptable characters enclosed by back ticks.<br><br>It forces identifier interpretation over keywords or other restrictions.<br><br>E.g., <tt>Thread.\</tt>yield\<tt>()</tt>
What is the <tt>AnyVal</tt> hierarchy?	<pre>              AnyVal<br>       /     /     \       \<br> Double    Char  Boolean  Unit<br>   |<br> Float<br>   |<br>  Long<br>   |<br>  Int<br>   |<br> Short<br>   |<br>  Byte<br></pre><br><br>Implicit conversions:<br><pre><br>Char -> Int<br>Byte -> Short -> Int -> Long -> Float -> Double<br></pre>
