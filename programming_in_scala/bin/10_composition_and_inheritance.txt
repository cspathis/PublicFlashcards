How do you decide if A should inherit B?<br>	- Is it obvious that an A <em>is-a</em> B?<br>- Will clients want to use an A as a B?<br>
How are method invocations on variables and expressions bound?<br>	Dynamically, meaning method implementation is determined at runtime based on the class of the object, not the type of the variable or expression.<br>
What do combinators do?<br>	They compose operators and combine elements of some domain into new elements.<br>
What is override modifier required for?<br>What is it optional for?<br>	It is required for all members (<em>i.e.</em>, it must also be applied to fields).<br><br>It is optional if you're implementing an abstract member.<br>
What do all constructors in Scala ultimately invoke?<br>How is this enforced?<br>	They invoke the primary constructor.<br><br>Each non-auxiliary constructor must call another constructor as its first line?<br>
Classes must be abstract if they have what?<br>	Abstract members.<br>
Prevent type derivation.<br>	As in Java, with <tt>final</tt> keyword on class or method.<br><br>You can also use <tt>sealed</tt>, which only allows derivation in the same source file.<br>
Give an alternative to inheritance, and when it should be used.<br>	Composition is preferred if only code re-use is desired.<br>
When should parameterless methods used?<br>	When the function is pure, i.e. has no side effects and does not depend upon mutable state.<br>
What do parametric field definitions allow?<br>	A field defined as a class parameter allows visibility modifiers, <tt>val</tt> or <tt>var</tt>, and <tt>override</tt>.<br><br><pre>class ArrayElement(<br>  val contents : Array[String]<br>) extends element<br></pre>
What does a subclass <em>not</em> inherit?<br>	Private members and overriden members.<br>
Parameterless methods vs. empty-paren methods<br>	<pre>def width() : Int<br>def width : Int<br></pre><br>If defined parameterless, it must be called that way.<br><br>This is to support the uniform access principle.<br>
What's a problem with fragile base class?<br>How does Scala minimize it?<br>	It causes inadvertent breakage of subclasses by changing a superclass.<br><br>Forcing override notation helps solve it.<br>
Name the class namespaces in Java and Scala.<br>	- Java: fields, methods, types, packages<br>- Scala: values (fields, methods, packages, singletons), types (class and trait names)<br>
What does Scala's class namespace allow?<br>	It allows the overriding of parameterless and empty-paren methods with a val.<br>
Give the Scala two factory patterns.<br>	Use companion object to provide methods for making instances of the companion class.<br><br>Then client code can import just the factory methods (which share the same name).<br><br>Optionally, make concrete subclasses private inside singleton to hide details. Only the visible superclass is returned.<br>
Why do packages share the same namespace as fields and methods?<br>	To allow importing packages themselves and not just the names of types.<br><br>This also allows the importing of fields and methods of singleton objects.<br>
How does Scala achieve compatibility with Java's non-support of uniform access?<br>	It allows empty-paren methods to override parameterless ones and vice-versa.<br>
