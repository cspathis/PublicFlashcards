Define local variable.<br>	A variable defined inside a block. This does not include parameters, which are similar.<br>
What's a synthetic class?<br>	A class generated automatically by the compiler rather than being written by hand by the programmer.<br>
What are variables?<br>What can they be?<br>	Named entities that refer to an object.<br><br>They can be either var or val.<br>
Give two definitions of value.<br>	- The result of computation or expression.<br>- Formally, the image of an object in memory.<br>
What are helper functions?<br>How are they usually implemented in Scala?<br>	Functions that service nearby functions.<br><br>They are usually implemented as local functions in Scala.<br>
Define referential transparency.<br>	The property of functions that are independent of temporal context and have no side effects.<br><br>Referentially transparent functions' results can be replaced with an invocation of the function without changing the program's results.<br>
What is the functional style?<br>What are its characteristics?<br>	Style emphasizes functions and evaluation results, de-emphasizing the order in which operations occur.<br><br>Characterized by:<br>- Passing function values into looping methods.<br>- Immutable data.<br>- Methods with no side effects.<br>
Discuss reference and referring.<br>	Java abstraction of a pointer, which uniquely identifies an object on the JVM's heap.<br><br>Variables hold references, but "referring" is more abstract than "holding a reference" because a variable of type <tt>AnyVal</tt> may hold a reference to an Integer, but may not if a primitive int is being used.<br>
Define the uniform access principle.<br>	Variables and zero parameter functions should be accessed using the same syntax.<br>
Define by-name parameter.<br>What are all others?<br>	A parameter marked with => before type.<br><br>Corresponding arg is not evaluated before the method is invoked, but each time the parameter is referenced by name inside the method.<br><br>All others are by-value.<br>
Define function literal.<br>What does the spec call them?<br>	A function with no name, specified with function literal syntax.<br><br>The spec calls them "anonymous functions".<br>
Define statement.<br>	An expression, definition, or import.<br><br>i.e., things that can go into a template or a block in Scala source code.<br>
Define block.<br>What doesn't qualify as a block?<br>	Encapsulation construct for which you can only see side effects and a result value?<br><br>Curly braces of class don't qualify because members are visible.<br>
Define local functions.<br>	Functions defined inside a block.<br>
Define method.<br>	Functions (in the general sense) that are members of a class, trait, or singleton object.<br>
Define expression.<br>	Any bit of Scala that evaluates to (results in) a value.<br>
Define predicate.<br>	A function with Boolean results.<br>
Define static type.<br>	It restricts the possible values to which a variable can refer, or an expression can produce, at runtime.<br>
Describe define.<br>	Give a name and implementation, hence abstract members are declared and not defined.<br>
Define auxiliary constructor.<br>	Extra constructors defined inside curly braces of class definition, which look like methods named "this" with no result type.<br>
When can objects be reclaimed?<br>	When they are unreachable.<br><br>This is not the same as unreferenced.<br>
Define bound variable.<br>	A bound variable of an expression is a variable that's both used and defined inside the expression.<br>
Define free variable.<br>	A free variable of an expression is a variable that's used but not defined in an expression.<br><br><tt>(x:Int) => (x,y)</tt><br><br>y is free.<br>
Define procedure.<br>	A function with result type of Unit. It's executed only for its side effects.<br>
Define template.<br>	The body of a class, trait, or singleton definition.<br><br>It defines type signatures, behavior, and initial state.<br>
Define member.<br>What is this in contrast to?<br>	Any named element of the template of a class, trait, or singleton object.<br><br>It can be accessed with the name of owner, a dot, and its simple name.<br><br>- Also, a class/singleton/trait is a member of the package in which it was defined.<br>- By contrast, a local variable/function is not a member of its surrounding block.<br>
Define target typing.<br>	A form of type inference that takes into account the type that's expected.<br>
