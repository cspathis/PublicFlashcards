Define <tt>Unit</tt>.<br>	An abstract final class that extends <tt>AnyVal</tt>.<br><br>Its only instance is <tt>()</tt>.<br>
What compromises did Scala make for Java interop?<br>	- Static overloading of methods.<br>- Both traits and classes.<br>- Inclusion of null.<br>- Huge number of static types (e.g., existential types).<br>
Give a structural type example for parameter that defines a <tt>getName</tt> function.<br>	<pre>def printName(namedObj: {def.getName(): String}) {<br>  println(namedObj.getName())<br>}<br></pre>
Describe <tt>Nothing</tt>.<br>	A final trait that extends <tt>Any</tt>.<br><br>Subtype of every <tt>Any</tt>.<br><br>There are no instances of this type at all.<br>
Describe <tt>None</tt>.<br>	A case object that extends <tt>Option[Nothing]</tt>.<br><br>This represents non-existent values.<br>
Describe <tt>Nil</tt>.<br>	A case object extending <tt>List[Nothing]</tt>.<br><br>It can stand in as an empty <tt>List</tt> of any type.<br>
Describe <tt>Null</tt> and <tt>null</tt>.<br>	Final trait that extends <tt>AnyRef</tt>.<br><br>Subtype of <tt>AnyRef</tt>.<br><br>Its only instance is the <tt>null</tt> reference.<br>
