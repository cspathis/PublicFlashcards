How are function literals implemented?<br>	They are compiled into a class that is instantiated at runtime as a function value.<br>
How is <tt>nums.foreach(println)</tt> implemented?<br>	It's implemented through the partially-applied function:<br><tt>nums.foreach(println _)</tt><br><br>The concise form only works where a compatible function is expected.<br>
Describe repeated parameter syntax.<br>	Put <tt>*</tt> after the type of the repeated parameter:<br><br><tt>def echo(args: string*)=//...</tt><br><br>Available as an <tt>Array</tt> of the parameter type.<br>
What makes a function literal a <em>closure</em>?<br>	Function literals are <em>closed</em> terms, since they have no free variables.<br><br>Closures are <em>open</em> terms (refer to variables defined elsewhere), and close the function by capturing the binding of the free variables.<br>
What is a function value?<br>	It's an instance of a class that extends one of several <tt>FunctionN</tt> traits in the package scala.<br>
Contrast closures and Java inner classes.<br>	Inner classes can't access modifiable variables and surrounding scopes, so there's no difference between capturing a variable and capturing its current value.<br><br>Scala captures variables so it "sees" changes.<br>
Pass array to a repeated parameter.<br>	Put <tt>: _*</tt> after name<br>  <tt>echo(arr: _*)</tt><br><br>e.g.,<br>`def echo (args String*)<br>  for (arg <- args) println(arg)`<br>
Describe tail-recursive stack traces.<br>	They show only one call of the recursive function, unless you use<br>  <tt>-g:notailcalls</tt><br>to scala shell or to <tt>scalac</tt>.<br>
Which instance of a local variable of a method, repeatedly called, will a closure capture?<br>	It will capture the one currently active. The closure keeps the variable alive after the method returns, automatically moving it from the stack to the heap, if necessary.<br>
Why the trailing underscore?<br>	It avoids situations where the programmer forgets to provide the right parameters, giving the unexpected result of a <em>function value</em> instead of the application of a function.<br><br>Hence <tt>_</tt> can be left off <strong>only</strong> when a function is expected.<br>
Assign a method or local function to a variable.<br>	Use a partially-applied function.<br><br><pre>def sum(a:Int, b:Int, c:Int) = a*b*c<br>val a = sum _<br>a(1,2,3)<br></pre>
What do multiple underscores in a function literal do?<br>	They represent one arg each, not multiple references to the same one.<br>
What are the limits of tail recursion?<br>	It's only for methods and local functions without intermediaries.<br><br>It will not work with function values, or intermediaries such as one method tail-calling another method that calls it back.<br>
Function literals vs. function values<br>	Source code vs. objects at runtime.<br>
What is the syntax for multiline function literals?<br>	Use curly braces.<br>
Why do local functions reduce boilerplate over private methods?<br>	There's no need to pass outer functions' args.<br>
