How can you use both mutable and immutable Sets in the same file?<br>	<pre>import scala.collection.mutable<br>mutable.Set<br></pre><br>Or rename one of them.<br>
Describe the <tt>x += y</tt> compiler magic.<br>Why is it provided?<br>What does it apply to?<br>	It will use <tt>+=</tt> operator if possible. Otherwise it will try to expand to<br><tt>x = x + y</tt><br><br>It applies to <strong>any</strong> assignment method to make it easy to switch from mutable to immutable collections and vice versa.<br>
Create a collection from another of a different type.<br>	Create an empty one and then add (<tt>++</tt>) to the existing one.<br><br><pre>val treeSet = TreeSet[String]() ++ list<br>val mutaSet = mutable.Set.empty ++ treeSet<br>val immu = Map.empty ++ muta<br></pre>
What do Tuples save you?<br>	The tedium of defining simplistic data-heavy classes.<br>
Name the default mutable and immutable <tt>Sets</tt>/<tt>Maps</tt> provided by factory methods.<br>	<tt>HashSet</tt> and <tt>HashMap</tt> for all mutable sets, maps, and large immutable ones.<br><br>Small (0-4 elements) immutable <tt>Sets</tt> and <tt>Maps</tt> get specialized implementations like <tt>Set4</tt>.<br>
Describe the behavior of<br><tt>val first, second = someTuple2</tt><br>	It will multiply assign the <tt>Tuple2</tt> to both first and second, since there are no parens.<br>
Describe four ways to make threadsafe sets and maps.<br>	- Mix in <tt>SynchronizedSet</tt> or <tt>SynchronizedMap</tt>.<br>- Use <tt>java.util.concurrent</tt>.<br>- Use actors and unsychronized collections.<br>- Or, use immutable ones.<br>
What can newer imports do to older ones?<br>	They can hide clashing simple names of the older ones<br><br><pre>Map()  //immutable<br>import scala.commection.mutable.Map<br>Map()  //mutable<br>import scala.collection.immutable.Map<br>Map()  //immutable<br></pre>
What is an important difference between Scala and Java string?<br>	Scala's implicitly converts to <tt>RichString</tt> which is <tt>Seq[Char]</tt>, hence you can iterate over it or use <tt>Seq</tt> methods on it.<br>
Give a nicer way to widen the static type of a new collection.<br>	<tt>val stuff = Set[Any] (42)</tt><br>Nicer than<br><tt>val stuff: Set[Any] = Set(42)</tt><br>
Sorted sets and maps are implemented with which classes?<br>They are always ...<br>Which structure do they use?<br>	<tt>TreeSet</tt> and <tt>TreeMap</tt>.<br><br>... immutable.<br><br>They use red-black trees on items (or keys).<br>
How does <tt>Predef</tt> choose the default interpretation of <tt>Set</tt>?<br>	- It defines the type alias of <tt>Set[T]</tt>.<br>- It makes a val <tt>Set</tt> the singleton <tt>scala.collection.immutable.Set</tt>.<br><br><pre>typeSet[T] = scala.collection.immutable.Set[T]<br>val Set = scala.collection.immutable.Set<br></pre>
