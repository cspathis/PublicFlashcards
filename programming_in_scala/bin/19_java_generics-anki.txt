Name three consequences of Java erasure.	- You cannot make arrays of parameterized type.<br>- You cannot cast to parameterized type.<br>- You cannot use an instance of a parameterized type.
What does Java generic method type inference do?<br><br>When might it fail?	It almost always relieves you of the need to explicitly pass types to the method parameter.<br><br>This may fail, for example, when the method takes no argumenets.<br><br><tt>Collections.<String>emptySet()</tt>
What's the difference between generics and templates?	The declaration of a generic is never actually expanded - not anywhere.
Create an <tt>ArrayList</tt> that can hold any type.<br><br>(Java)	<tt>List<Object> l = newArrayList<Object>();</tt><br><br>Then you can refer to it as <tt>List<?></tt>.<br><br>Note that you cannot parameterize constructor call with ?.
What's the difference between <tt>List<?></tt>, <tt>List<Object></tt>, and raw <tt>List</tt>?<br><br>(Java)	<tt>List<?></tt> guarantees <tt>get()</tt> will have a return type of parameterized type, even though it is unknown to the compiler. Raw <tt>List</tt> does not.<br><br><tt>List<?></tt> effectively read-only because the compiler will not allow invocation of methods that have a parameter of the unknown type, because if can't do type checking on what you pass it.
Describe Java wildcard capture.	It's an exception to the general rule that objects of unknown type cannot use generic methods.<br><br>Sometimes the compiler can infer the unknown type of a wildcard as a type argument to a generic method.
When should Java generic methods be preferred over wildcard non-generic methods?	Only when a single type variable is used to express a relationship between two parameters, or between a parameter and a return value.
Give the Java type variance bounds syntax.	<pre>name extends type 1 & type 2 & ...<br><br>name super type 1 & type 2 & ...</pre><br>Name is either wildcard or parameter name like T.<br><br><tt>typeN</tt> can be parameterized, too.
What are some holes in Java generics?	- Raw (unparameterized) types are allowed for pre-1.5 compatibility.<br>- Parameterized types can be passed to methods with raw type arguments, also for pre-1.5 compatibility.<br>- Because of type erasure, array types cannot be parameterized. No runtimecheck for <tt>ArrayStoreException</tt> is possible.
Describe Java gotcha with generic <tt>varargs</tt>.	<tt>varargs</tt> implicitly create an array, so one method invocation may succeed and another fail depending on whether the <tt>vararg</tt> type passed is parameterized.<br><br><tt>public static T foo(T...vals)</tt> will fail for parameterized <tt>T</tt>.
