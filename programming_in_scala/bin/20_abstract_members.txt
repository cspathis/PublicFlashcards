What are the limitations on abstract types?<br>	- They cannot create an instance of an abstract type.<br>- They cannot have an abstract types as a supertype of another type.<br>- Virtual classes may allow, but not currently supported in Scala.<br>
Why do lazy values mesh better with functional programming?<br>	If initialization of lazy <tt>val</tt>s produces side effects or depends on them. The order of initialization becomes important but cannot be guaranteed by lazy <tt>val</tt> author.<br>
Give the inner class syntax.<br>	<tt>Outer#Inner</tt> unlike Java's <tt>Outer.Inner</tt>.<br><br>'.' is reserved for objects in Scala.<br>
How do you access the instance of your outer class from inside the inner class?<br>	You can use the Java-style <tt>Outer.this</tt>.<br><br>Or use this aliasing:<br><br><pre>class Outer { outer (immediately after opening brace of class or trait) =><br>  class Inner {<br>    println(Outer.this eq outer) //true<br>  }<br>}<br></pre>
What are some features of Enumeration?<br>	- Named values. Create with <tt>Value("name")</tt> instead of Value.<br>- <tt>retrieving Int: Color.Red.id</tt><br>- <tt>retrieving value: Color(I)</tt><br>
What strategies does Scala provide for negating the risk of using uninitialized fields?<br>	Pre-initialized fields, lazy <tt>val</tt>s.<br>
What do abstract <tt>var</tt>s create?<br>	They create abstract getters and setters with usual name.<br><br>A reassignable field itself is not created, so technically you can override getter and setter alone.<br>
How do lazy vals eliminate the risk of using uninitialized values?<br>	If a trait puts all initialization code behind lazy vals (remember, vals can have block definitions), there is effectively no constructor and no risk of any code using values until after the object is created. After all, the first access to an object only occurs after it is made, and only there is lazy code run.<br>
What is a common use of abstract types?<br>	They're used to narrow parameters of a superclass's abstract method in subtypes.<br><br>Instead the abstract method can be defined to take a parameter of an abstract type that has an appropriate upper bound. Now subtypes can define the abstract type appropriately for themselves.<br>
What is the main advantage of abstract <tt>val</tt>s over abstract methods?<br>	The guarantee to the client that the value will never change.<br><br>In other words, abstract <tt>val</tt>s constrain their legal implementations.<br>
Describe the singleton type.<br>	The type of a singleton object only has one instance - the singleton itself.<br><br><pre>object O<br>O.type<br></pre>is <tt>O</tt>'s type.<br><br>Rarely useful, except to convince the compiler of something. The compiler is reluctant to infer such a rare type.<br>
Give a Scala shortcut to instantiating inner class that works outside the outer class.<br>	<pre>val o = new Outer<br>val i = new o.Inner<br></pre>
What can substitute for trait parameters (which Scala does not allow) to create trait instances?<br>	Abstract vals combined with anonymous classes.<br><br><pre>trait Rational {<br>  val numer: Int<br>  val denom: Int<br>}<br>new Rational {<br>  val numer = 1; val denom = 2;<br>}<br></pre>
Why are pre-initialized fields needed?<br>	Only because traits have constructors but no parameters.<br>
What is a path-dependent type?<br>What are they subtypes of?<br>	A type sensitive to the path used to access it.<br><br>They are subtypes of some more general path-independent type.<br><br>For example, <tt>myOuter.Inner</tt> is a path-dependent subtype of <tt>Outer#Inner</tt>.<br>
What is a self type?<br>What is its syntax?<br>What is its purpose?<br>	The assumed type of this, to be used within a trait or class.<br><br><tt>trait MyTrait { this: SomeType...</tt><br><br>It can be used to limit the concrete classes that mix in the trait.<br>
What can be abstract in Scala?<br>Which need be declared abstract?<br>	Classes, methods, fields, types.<br><br>Only classes are declared abstract. Methods of traits can be too, in the abstract override case.<br><br>Traits are by definition abstract.<br>
What are the types of enum values?<br>	The path-dependent type.<br><br><tt>MyEnumSingleton.Value</tt><br><br>Value is an inner class of Enumeration and has a similarly named method to create new instances.<br>
How do you make an enumeration?<br>	You extend <tt>Enumeration</tt> with a singleton and create <tt>val</tt>s, assigning each the result of the <tt>Value</tt> method.<br><br><pre>objectColor extends Enumeration {<br>  val Red, Blue, Green = Value<br>}<br></pre>
What's the limitation of pre-initialized fields?<br>This is exactly like what?<br>	Initializers can't refer to the object to be constructed, because initializers run before superclass constructor.<br><br>Hence "this" refers to object <em>containing</em> the class or object being constructed.<br><br>This is exactly like class constructor args.<br>
Give the syntax of pre-initialized fields.<br>	Put fields in curlies before superclass constructor call. Use 'with' for classes too!<br><br><pre>new {<br>  val i = O<br>} with MyType<br>object O extends {<br>  val i = O<br>} with MyType<br>class C extends {<br>  val i = O<br>} with MyType<br></pre>
Give the initialization order for class parameters and abstract fields.<br>	Class parameters are evaluated before they are passed to the class constructor.<br><br>An implementing val definition in a subclass is evaluated only after the superclass has been initialized.<br><br>This matters when vals are not simple literals.<br>
What do pre-initialized fields do?<br>When is this frequently useful?<br>	They allow initialization of a field <em>before</em> a superclass is called.<br><br>This is typically useful when "instantiating" a trait (via an anonymous class) where the trait's initializers reference its abstract fields.<br>
