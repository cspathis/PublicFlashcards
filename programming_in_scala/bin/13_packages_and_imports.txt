Achieve Java's package-private.<br>	<tt>private[X]</tt> where X is the directly enclosing package.<br>
What happens if <tt>java.lang</tt> and scala have a name colliding member?<br>	The Scala member hides the Java one.<br>
What's the problem with the protected members of singletons?<br>	They make no sense because singletons have no subclasses.<br>
Describe object-private.<br>	<tt>private[this]</tt><br><br>It's only accessible by this instance of a class, not others.<br>
What are the major differences between Scala and Java packages?<br>	- Scala's are hierarchical like Java's, but they also properly nest.<br>- Java's package statement in Scala is just syntactic sugar for<br><pre>package X {<br>  //compilation unit<br>}<br></pre>
What's the difference between Scala and Java private?<br>	Scala is more consistent, denying visibility to containing instances of nested classes.<br>
What's the difference between Scala and Java protected modifier?<br>	Scala gives only subclass access, not package members too.<br>
Describe coupling.<br>	It is the reliance of various parts of the program on one another.<br>
Describe explicit Scala private.<br>	<tt>private[X]</tt> where X is the containing class.<br>
Achieve Java private.<br>	<tt>private[X]</tt> where X is the outermost class.<br>
Import selectors syntax.<br>	In curly braces, allows<br>- Simple name.<br>- Renaming clause <tt>x => y</tt>.<br>- Hiding clause <tt>x => _</tt>.<br>- catch-all _, all members not in previous clauses, must be last.<br><br>You can leave off the curlies if only importing 4 or one of 1.<br>
How do you make a Scala import of non-singleton object members?<br>When is it useful?<br>	<tt>import fruit._</tt>, where fruit is the param to a method.<br><br>It's useful when you use objects as modules.<br>
Name three ways to specify package name.<br>	- From the normal root of the hierarchy.<br>- From __root__ package to force absolute lookup when inner scope masks.<br>- Relative to current package.<br>
Give the import selectors syntax.<br>	In curly braces. allows:<br>1) Simple name.<br>2) Renaming clause <tt>x => y</tt><br>3) Hiding clause <tt>x => _</tt><br>4) Catch-all <tt>_</tt>, all members not in previous clauses, must be last.<br><br>You can leave off curlies if you're only importing #4 or one of #1.<br>
