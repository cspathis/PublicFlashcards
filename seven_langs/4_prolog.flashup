#GRAMMAR 1
#TOPLEFT Seven Languages in Seven Weeks
#TOPRIGHT Prolog
#NUMBERS true

* Why is Prolog a departure from many common languages?
Prolog is ``declarative``, not ``imperative``. You describe logic, not a flow of control.

* What are the building blocks of Prolog?
Facts, rules, and queries.

* What does the Prolog compiler do?
It compiles facts + rules (together called a ``knowledge base``) to support efficient querying.

* What are the Prolog capitalization rules?
If a symbol begins with a lowercase character it's an atom - a fixed value.
If it begins with an uppercase character it's a variable.

* How do you load a Prolog file?
`
['relative/path/file.pl']
`
``or``
`
['/absolute/path/to/file.pl']
`

* What do the Prolog replies `yes` and `no` mean?
`yes` means "yes I can prove that" or "yes I know that to be true".

`no` means "no I can't prove that" or "no I don't know that to be true".

* How can you make a rule with two variables guaranteed to be distinct?
Use the `\+` predicate, ``.e.g,``

`
somePred(X, Y) :- \+ (X = Y), someOtherPred(X, Y)
` 

* How can you query a knowledge base?
- Type a fact and see if Prolog can prove it.
- Type a fact with a variable (conventionally named `What`) to see if Prolog can find bindings that satisfy the fact. Use semicolons (`;`) to ask for another binding, or `a` to get all of them.

* How is `=` different in Prolog compared to other languages?
`=` is ```not``` assignment, it is ``unification``, the attempt to make both sides logically the same.

* How is a rule with multiple clauses satisfied?
* How is a rule with multiple subgoals satisfied?
Only one of the clauses must be satisfied.

Every subgoal must be satisfied.

* How can you get tail-call optimizations in Prolog?
Make your recursive subgoal the last subgoal in a rule.


* How can you unpack a list?
`
?- [one, two, three, four]= [Head | Tail].
Head = one,
Tail = [two, three, four].
`

* What kind of problem is ideal for Prolog?
One which has constraints that are easily expressed but difficult to satisfy. Since Prolog figures out the satisfying bindings, Prolog is doing the hard part for you.

* What are some areas where Prolog is still used?
- Games
- Semantic web
- AI and NLP
- Scheduling

* What are Prolog's weaknesses?
- It's not a general purpose language.
- It may not scale due to inefficient DFS approach to unification and heavy use of recursion.
