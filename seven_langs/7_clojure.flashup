#GRAMMAR 1
#TOPLEFT Seven Languages in Seven Weeks
#TOPRIGHT Clojure
#NUMBERS true

* What is the relationship between Common Lisp, Scheme, and Clojure?
Scheme and Clojure are in the lisp-1 family, which use the same namespace for functions and variables.
Common Lisp is in the lisp-2 family, which uses separate namespaces.

* What's the easiest way to create a Clojure project?
With the leiningen build automation tool.

`
lein new MyProj
`

* What is Clojure's function syntax?
`
(funcname arg1 arg2 ...)
`

* What is odd about Clojure operators?
- It uses the normal function prefix notation.
- `/` results in a `Ratio`.

* How do you do truncating division?
Using `mod`.

* What is the advantage of doing math in prefix notation?
- It's easier to support higher-arity versions of the function.
- There's no ambiguity and no need for consideration of operator precedence.

* How can you concatenate strings?
Using the equivalent of Java's `toString`.

`
(str obj1 obj2 ... objn)
`

* Create a string without quotes.
Use `\`s:

`
user=> (str \h \i)
"hi"
`

Back slashes actually create characters, which are not strings in Clojure.

* Show the Java class of an expression.
`
(class expr)
`

* How are conditionals expressed?
Using an `if` function.
Its first argument is a Boolean expression, the second argument is the code to run if the Boolean expression is `true`. The third argument is optional and is the `else` code.

* What evaluates to "true" for the purpose of `if` expressions?
Everything except `nil` and `false`.
`0` and `""`.

* What conventionally separates lists and vectors?
* What separates them in terms of implementation?
Lists are for code, while vectors are used to store data.

Vectors support fast random access.

* How are non-function lists constructed?
With the `list` function or by quoting:

`
'("my" "favorite" "list")
`

Or with the `cons` function.

* How do you get the head/tail of a list?
* The last element?
`first`, `rest`, `last`

* Access an arbitrary index in an list.
* Combine two lists.
`
user=> (nth ["a", "b", "c"] 2)
"c"
`

Use `concat`.

* What is the syntax of vectors, sets, and maps?
Vectors use `[]`, sets use `#{}`, maps use `{}`.

* How do you assign to a variable?
* Are re-assignments allowed?
`
(def VarName expr)
`

Yes, reassignments are allowed.

* How can you access the size of collections?
Use `count`.

* Show that vectors and sets are really functions.
`
user=> (["a" "b" "c"] 1)     
"b"
user=> (#{"a" "b" "c"} "a")
"a"
`

* What syntactic convenience does Clojure allow for maps?
Commas as whitespace, to prevent mixing up keys/values, or putting an odd number of elements.

* What are the two kinds of symbols in Clojure?
Keywords (beginning with `:`) stand for themselves, like atoms in other languages. Symbols refer to something else.

* 
