What's the difference between single and double quoted strings?<br>	Single quoted strings are interpreted literally.<br><br>Double quoted strings allows further processing on the string, like the substitution of variables into <tt>${VARIABLE}</tt>.<br>
How do you print to the screen?<br>	<tt>puts some_string</tt><br>
How do you get the class of an object?<br>How do you get the methods of an object?<br>	<tt>obj.class</tt><br><tt>obj.methods</tt><br>
What are the two forms of conditionals?<br>	Block form:<br><pre>if condition<br>   #statements<br>end<br></pre><br>One-line form:<br><tt>statement if condition</tt><br>
What are <tt>unless</tt> and <tt>until</tt> used for?<br>	They are more idiomatic Ruby for "if not" and "while not" constructions.<br>
Explain Ruby's boolean type coercion.<br>	Every type can be interpreted as a boolean. <tt>nil</tt> and and the literal <tt>false</tt> evaluate to <tt>false</tt>. Everything else evaluates to <tt>true</tt>.<br>
What's the difference between <tt>&&</tt>/<tt>||</tt> and <tt>&</tt>/<tt>|</tt>?<br>	<tt>&&</tt>/<tt>||</tt> short-circuit, as in Java. Also, <tt>&&</tt>/<tt>||</tt> have the alternatives <tt>and</tt>/<tt>or</tt>.<br>
What makes Ruby dynamically typed?<br>	Type checking isn't done until run-time, when an operation is actually executed.<br>
How is Ruby's type checking fundamentally different from Java's?<br>	Ruby is duck-typed, meaning one type can be used as another so long as it has the needed fields and methods to make an operation work. This is to be contrasted with languages like Java where one type can be used as another only if one is a subclass of the other.<br>
What happens if your function doesn't have a <em>return</em> statement?<br>	The last value computed is the result of the function.<br>This is also true of other kinds of blocks, not just the bodies of functions.<br>
Empty parens are always ...<br>	... optional. Whether in the definition of a function or a call.<br>
What is Ruby's primary collection?<br>What is its syntax?<br>	<tt>Arrays</tt>.<br><br>They use square brackets for definition and indexing, two dots for slicing.<br><pre>nums = ['one', 'two', 'three']<br>nums[0]    #'one'<br>nums[-1]   #'three'<br></pre>
How do you slice an <tt>Array</tt>?<br>	Use <tt>Range</tt> objects like <tt>0..3</tt>.<br><pre>someArray[n1..n2]<br></pre>
What happens if you go out of bounds with an array?<br>	Ruby returns <tt>nil</tt>, unlike Java or Python.<br>
How do you test if an <tt>Array</tt> has a given member?<br>	<pre>el.include?(arr)<br></pre><br>There is no equivalent to Python's <tt>in</tt>.<br>
What is the syntax of hashes?<br>	<pre>captitals = {'France' => 'Paris', 'USA' => 'Washington D.C.'}<br>capitals['France'] #'Paris'<br></pre>
What is a symbol?<br>	An idntifier that follows a colon. They are interned, guaranteeing that two uses of the symbol <tt>:symb</tt> actually refer to the same object in memory.<br>
How can you find an object's unique identifier?<br>	<tt>obj.object_id</tt><br>
What are Ruby's key strengths?<br>	- Concise, elegant syntax.<br>- Flexible polymorphism from duck typing.<br>- Consistent object-orientation.<br>- Short time to market.<br>
What are two common uses of Ruby?<br>	- Scripting, especially to glue programs together.<br>- Web development with Ruby on Rails.<br>
What are Ruby's key weaknesses?<br>	- Poor performance.<br>- Weak concurrency due to mutable state and the global interpreter lock.<br>- Dynamic & duck typing reduces safety and rules out many useful development tools.<br>
