#GRAMMAR 1
#TOPLEFT Programming Erlang
#TOPRIGHT 2
#NUMBERS true

* How do you exit the `erl` shell?
Ctrl+G, q, Enter

* How does Erlang represent hex and other non-decimal systems?
`base#num`

For example, `16#b` is 11.

* Is there a global scope?
No, variables are restricted to the scope in which they were defined, typically a clause of a function. There's no wider scope that will accept variable definitions.

* What is `=`?
* How is it evaluated?
Pattern matching, not assignment.

The right side is evaluated first and then matched against the left side.

* Why do reassignable variables make debugging more difficult?
Not only do you need to find a variable with the wrong value, you also need to figure out when that unexpected value was assigned. Without reassignment the second part of that process is eliminated.

* How is arithmetic different in Erlang than in C-like languages?
Integers are exact and arbitrary-size values. Integer division results in floating-point results without truncation.

* What are the case rules for atoms?
They begin with a lower case letter, and continue with letters, underscores, or at signs.
Atom interpretation can also be forced on other sequences by surrounding them with single quotes.

* Atoms can be compared to what in C?
Global constants defined in a header using `#define`.

* What are two key differences between C structs and Erlang tuples?
- Tuples don't define a new type.
- The members of a tuple don't have names. That can be accomplished by nesting tuples, however.

* Why aren't atoms garbage collected?
They have global scope, unlike variables.

* 

