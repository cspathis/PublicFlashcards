#GRAMMAR 1
#TOPRIGHT 2
#TOPLEFT Learning Perl
#NUMBERS true

* In Perl, all numbers are what?
* How large are they?
Floating-point.

They size of a C `double` is on your system.

* When are underscore readability separators allowed in numbers literals?
When the number literal is non-decimal.

* Using `**` for exponentiation comes from what language?
FORTRAN.

* Describe single-quoted string syntax..
- All characters are literal except for the backslash-singlequote and double-backslash combinations.
- They can be multi-line.

* Describe double-quoted string syntax.
- Backslash escape sequences are supported.
- Variables are interpolated.
- They can be multi-line.

* What does perl do with strings that don't look like numbers, when in a number context?
It ignores trailing characters that it can't interpret as numbers. If ``everything`` is discarded, you're left with the empty string which is interpreted as `0`.

* What's the best way to enable warnings?
- In the shebang line. It will work on non-Unix systems too.
- Post-5.6 with the pragma `use warnings;`.

* How can you get more descriptive error warnings?
- `use diagnostics;`
- Or equivalently, use `-Mdiagnostics` argument on `perl`.

* How can you force yourself to use only declared variables.
`use strict;`

It will require many other things, be warned.

* What is a ``sigil``?
The symbol `$&`?

* What happens if you interpolate an unknown scalar value?
`undef` will be assigned to the scalar, which is interpreted as an empty string.

* How variable names identified for interpolation?
As in bash, if you just use `$ident` the identifier will be interpreted as the longest legal string following the `$`. If you want something shorter you can use `${ident}`.

* Give the idiomatic way of reading a line of text from the terminal.
`
chomp($text = <STDIN>);
`

* In Perl parens are ...
... optional. They need only be used when leaving their absence adds a new interpretation.

* What does `chomp` do?
It removed the last input separator from a string, returning the number of characters removed. 

* What is the default value for scalar variables?
* Describe it.
`undef`

It acts as numeric zero or as the empty string.

* Name some ``numeric`` equivalences with numeric `0`.
`undef` and the strings `""` and `"0"`.

* What is `$/`.
A special variable storing the input separator. Typically it's `"\n"`.

* `undef`'s string/numeric behavior allows which idioms?
Using binary assignment operators on incrementers whose variables are not first initialized.

* How is the EOF condition represented?
With `undef`.

* Test for `undef`.
Use the `defined` function.

* In program text, what is "undef"?
An operator which returns the value `undef`.


