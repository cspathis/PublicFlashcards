#GRAMMAR 1
#TOPLEFT Programming Perl
#TOPRIGHT 1
#NUMBERS true

* `print` in perl doesn't include what?
A newline character.



* List the variable type syntax.
`$` scalar
`@` array
`%` hash
`&` subroutine
`*` typeglob

* What's the difference between double, single quotes, and back ticks?
Double quotes perform variable interpolation and backslash interpretation. Single quotes do not.
Back ticks capture the output from executing a command.

* What are the default values?
`""` or `0`, as appropriate.

* How are scalar values interpreted?
As the expected type, depending on context.

* What context do double quotes provide?
* Assignment to arrays/hashes?
``interpolative`` context

``list`` context

* Create a list using literal syntax.
* Unpack that list.
`
@threeprimes = (2, 3, 5);

($a, $b, $c) = @threeprimes;
`

* Index an array.
* Update an array.
Either involves a scalar so use `$` not `@`.

`
$lst[n] = new_el

print $lst[n]
`

* Create a hash using literal syntax.
`
@birthmonths = (
    "John" => "February",
    "Mary" => "March",             
);
`

Arrows are just a nicer way of writing more arrows.

* Look up an element in a hash.
* Update a hash.
`
$hash{"key"}

$hash{"key"} = val
`

As with arrays, notice the use of `$` when dealing with individual elements.


