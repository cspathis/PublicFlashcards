What is a Haskell module?<br>What is a Haskell program?<br>	A module is a collection of related functions, types, and typeclasses.<br><br>A program is a collection of modules where the main module loads up the other modules and then uses their functions.<br>
Which module is imported by default?<br>	<tt>Prelude</tt><br>
Give two shortcuts for importing modules in <tt>ghci</tt>.<br>	<pre>:m + Module1 Module2 ... ModuleN<br></pre><br>Or, load a script that does imports of its own. They too will be available.<br>
Selectively import functions from a module.<br>Exclude functions from a module import.<br>	<pre>import Module (func1, func2, ...)<br></pre><br><pre>import Module hiding (func1, func2, ...)<br></pre>
Mitigate name-collisions between needed functions from different modules.<br>How can this be made more convenient?<br>	You can import one on a qualified basis so only the fully qualified name of one (or both) of the functions is available.<br><pre>import qualified Module<br></pre><br>To make this more convenient the module can be renamed to something shorter.<br><pre>import qualified Module as M<br></pre>
What is Hoogle?<br>	<tt>http://haskell.org/hoogle</tt><br>A Haskell-specific search engine that lets you search by name, module name, or even type signature.<br>
Describe <tt>foldl'</tt> and <tt>foldl1'</tt>.<br>	They are strict versions of their lazy counterparts. They avoid stack overflow errors that result from folding on large lists.<br>
What is a thunk?<br>	A value that is yet to be evaluated.<br>
Flatten two lists.<br>Remove duplicates.<br>Which two functions work on lists of booleans?<br>	<tt>concat</tt><br><br><tt>nub</tt><br><br><tt>and</tt> and <tt>or</tt><br>
Describe <tt>span</tt> and <tt>break</tt>.<br>	<tt>span</tt> is like <tt>takeWhile</tt> but returns a pair of lists, the second of which is the list of elements that would have been dropped by <tt>takeWhile</tt>.<br><br><tt>break</tt> negates <tt>takeWhile</tt>'s predicate.<br>
Describe <tt>group</tt>.<br>Name a common use.<br>	It takes a list and groups adjacent elements into sublists if they are equal.<br><br>If you sort before grouping you can find out how many times each element appears in the list.<br>
What functions are provided for testing sublists?<br>	<tt>isPrefixOf</tt>, <tt>isSuffixOf</tt>, <tt>isInfixOf</tt><br>
Describe <tt>partition</tt>.<br>	It separates a list into a pair of two lists, those satisfying a predicate and those failing it.<br>
Split and join strings based on newline characters.<br>Do the same for words.<br>	<tt>lines</tt>, <tt>unlines</tt><br><br><tt>words</tt>, <tt>unwords</tt><br>
What are the <tt>Data.List</tt> "generic" functions?<br>What about the "by" functions?<br>	Functions whose names start with "generic" that correct the historical error of using <tt>Int</tt> instead of <tt>Num</tt> as the type of a parameter.<br><br>Functions whose names end with "by" test with a provided equality function instead of using <tt>==</tt>.<br>
What utility function helps in constructing comparison functions for "by" functions?<br>	<tt>on</tt>, used infix between <tt>(==)</tt> and the function that gets the value you want to use for comparison.<br>
How are maps from <tt>Data.Map</tt> created?<br>How are they represented internally?<br>	Using <tt>fromList</tt> on a list of 2-tuples where the first element is an <tt>Ord</tt>.<br><br>They are represented using trees.<br>
Look up a value in a map.<br>Check if a key is in the map.<br>Add/remove from a map.<br>	<tt>lookup</tt> returns a <tt>Maybe</tt><br><br><tt>member</tt><br><br><tt>insert</tt>/<tt>delete</tt><br>
How are the sets of <tt>Data.Set</tt> represented?<br>Create one.<br>	As trees, so they're ordered.<br><br>Use <tt>fromList</tt>.<br>
Create a set/map from a single value.<br>	Use <tt>singleton</tt>.<br>
Check a set's size.<br>Test a set for membership.<br>Add/remove from a set.<br>	<tt>size</tt>, <tt>null</tt>, <tt>empty</tt><br><br><tt>member</tt><br><br><tt>insert</tt>, <tt>delete</tt><br>
Compare strategies for eliminating duplicates from a list.<br>	<tt>nub</tt> is simplest, requires only <tt>Eq</tt>, but is potentially slow.<br><br>Converting to a set with <tt>fromList</tt> and then back with <tt>toList</tt> may be faster but requires <tt>Ord</tt>.<br>
Define your own module.<br>	<pre>module MyModule<br>( funcToExport1<br>, funcToExport2<br>...<br>) where<br>...<br></pre>
