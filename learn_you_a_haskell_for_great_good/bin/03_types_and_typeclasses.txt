What is <tt>()</tt>?<br>	Both the type and sole value of the empty tuple.<br>
What are Haskell's capitalization rules?<br>	Types start with an uppercase character, everything else with a lowercase letter.<br>
What is the key benefit of type variables over generics?<br>	Type variables stay maximally general (polymorphic), being restricted only by the ways the type is used. Generics force you to anticipate the maximum generality yourself when declaring the generic type's bounds.<br>
From an object-oriented point of view, a typeclass can be thought of as ...<br>	... an interface. It creates a contract that defines the behaviors of types of that class.<br>
From Haskell's point of view an operator is different from a function only in that ...<br>	... its name consists of only special characters and is infix by default.<br>
What does <tt>=></tt> do in a type signature?<br>	It indicates a class constraint. The left hand side indicates class membership/s (comma separated) of the type variables used on the right hand side.<br>
What is <tt>Eq</tt>?<br>What are some prominent non-<tt>Eq</tt>s?<br>	The type class for types that can be tested for equality.<br><br><tt>IO</tt> and functions are not members.<br>
Describe Haskell's equivalent of Java's <tt>Comparable</tt>.<br>	The typeclass <tt>Ord</tt> defines a function <tt>compare</tt> which returns an <tt>Ordering</tt>, meaning either <tt>GT</tt>, <tt>EQ</tt>, or <tt>LT</tt>.<br>
What is the <tt>Show</tt> typeclass?<br>	Its members can be presented as strings using the <tt>show</tt> function.<br>
How do you go back from <tt>show</tt>'s string representation to the object itself?<br>What's the catch?<br>	The <tt>Read</tt> typeclass defines <tt>read</tt> which does just that.<br><br>However, in order to know what type is desired, the result of <tt>read</tt> must be used in an expression or given a type annotation.<br>
What is a type annotation?<br>Give its syntax.<br>	Haskell's term for a manifest type. It's not an annotation on a type in the sense of Scala's <tt>@specialized</tt>.<br><br>Haskell type annotations use the <tt>::</tt> followed by the type.<br>
Members of <tt>Enum</tt> can do what?<br>What about <tt>Bounded</tt>?<br>	They can be enumerated.<br><br>They have an upper and a lower bound: <tt>maxBound</tt> and <tt>minBound</tt>.<br>
Give two examples of polymorphic constants.<br>	<pre>ghci> :t 0<br>0 :: (Num t) => t<br>ghci> :t maxBound<br>maxBound :: (Bounded a) => a<br></pre>
Make integral and floating point types play nice together.<br>What is that function's signature?<br>	<pre>ghci> :t fromIntegral<br>fromIntegral :: (Integral a, Num b) => a -> b<br></pre>
How can repeated computations be avoided in a series of guards?<br>	With a <tt>where</tt> clause following the guards, containing variable assignments, one per line, aligned.<br>
What additional kind of assignment can be made with <tt>where</tt>/<tt>let</tt>, pattern matching aside?<br>	Named functions can be created, using the normal syntax.<br>
Where are helper functions typically defined, when scope-limiting is desired?<br>	In a <tt>where</tt> clause. Sometimes this gets nested into one helper helping another, and so on.<br>
Other than order, what's the difference between <tt>let/in</tt> and <tt>where</tt>?<br>	- <tt>let</tt> is an expression, while <tt>where</tt> is just a syntactic construct.<br>- <tt>where</tt> doesn't have such a tight scope, so its bindings are active across multiple guards.<br>
How can multiple <tt>let</tt> bindings be put on one line?<br>	By separating the assignments with semicolons.<br>
In addition to guards and generators, what can go in list comprehensions?<br>	<tt>let</tt> expressions, being far more powerful than Scala's midstream definitions.<br>
Pattern matching on function parameters is just syntactic sugar for ...<br>What is the full syntax?<br>	... case expressions.<br><br><pre>case expr of pat1 -> res1<br>              ...<br>              patN -> resN<br></pre>
